{"ast":null,"code":"var accessToken;var cliendID='34a458ab7d504cf5949a47df7c242085';var redirecURI='https://quyvuacn.github.io/spotify/';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}//check for access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);console.log(expiresIn);console.log(accessTokenMatch);//This clears the parameters, allowing us to grab token when it expires.\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/spotify');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(cliendID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirecURI);window.location=accessUrl;}},search:function search(term){var accessToken=this.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonData){if(!jsonData.tracks){return[];}return jsonData.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlayList:function savePlayList(name,trackURIs){if(!name||!trackURIs){return;}var accessToken=this.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userID;return fetch(\"https://api.spotify.com/v1/me\",{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playListID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists/\").concat(playListID,\"/tracks\"),{headers:headers,method:\"POST\",body:JSON.stringify({uris:trackURIs})});});});}};export default Spotify;","map":{"version":3,"sources":["C:/Users/pc/OneDrive/Documents/GitHub/Lear_React/spotify/src/Components/util/Spotify.js"],"names":["accessToken","cliendID","redirecURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","console","log","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonData","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackURIs","userID","jsonResponse","method","body","JSON","stringify","playListID","uris"],"mappings":"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","sourcesContent":["let accessToken\r\nconst cliendID = '34a458ab7d504cf5949a47df7c242085'\r\nconst redirecURI = 'https://quyvuacn.github.io/spotify/'\r\nconst Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken\r\n        }\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1]\r\n            const expiresIn = Number(expiresInMatch[1])\r\n            console.log(expiresIn)\r\n            console.log(accessTokenMatch)\r\n            //This clears the parameters, allowing us to grab token when it expires.\r\n            window.setTimeout(()=> accessToken='',expiresIn*1000)\r\n            window.history.pushState('Access Token',null,'/spotify')\r\n            return accessToken\r\n        }else {\r\n            const  accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirecURI}`\r\n            window.location = accessUrl\r\n        }\r\n    },\r\n    search(term){\r\n        const accessToken = this.getAccessToken()\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                    headers : {\r\n                        Authorization : `Bearer ${accessToken}`\r\n                    }\r\n                }\r\n            )\r\n            .then(response=>response.json())\r\n            .then(jsonData =>{\r\n                if (!jsonData.tracks){\r\n                    return []\r\n                }\r\n                return  jsonData.tracks.items.map(\r\n                    track => ({\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n\r\n            })\r\n                )\r\n            })\r\n\r\n    },\r\n    savePlayList(name,trackURIs){\r\n        if(!name  || !trackURIs ){\r\n            return\r\n        }\r\n\r\n        const accessToken = this.getAccessToken()\r\n        const  headers ={\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        let userID;\r\n\r\n        return fetch(`https://api.spotify.com/v1/me`,{headers:headers})\r\n                .then(response=>response.json())\r\n                .then(jsonResponse =>{\r\n                    userID = jsonResponse.id\r\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n                    {\r\n                            headers:headers,\r\n                            method : 'POST',\r\n                            body   : JSON.stringify({name:name})\r\n                        }\r\n                        ).then(response => response.json())\r\n                         .then(jsonResponse =>{\r\n                             const playListID = jsonResponse.id\r\n                             return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playListID}/tracks`,{\r\n                                 headers:headers,\r\n                                 method:\"POST\",\r\n                                 body : JSON.stringify({uris:trackURIs})\r\n                             })\r\n                         })\r\n                })\r\n\r\n    }\r\n}\r\n\r\nexport  default Spotify"]},"metadata":{},"sourceType":"module"}