{"ast":null,"code":"let accessToken;\nconst cliendID = '34a458ab7d504cf5949a47df7c242085';\nconst redirecURI = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirecURI}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = this.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonData => {\n      if (!jsonData.tracks) {\n        return [];\n      }\n\n      return jsonData.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n\n    const accessToken = this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playListID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playListID}/tracks`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/pc/OneDrive/Documents/GitHub/Lear_React/spotify/src/Components/util/Spotify.js"],"names":["accessToken","cliendID","redirecURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonData","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackURIs","userID","jsonResponse","method","body","JSON","stringify","playListID","uris"],"mappings":"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","sourcesContent":["let accessToken\r\nconst cliendID = '34a458ab7d504cf5949a47df7c242085'\r\nconst redirecURI = 'http://localhost:3000/'\r\nconst Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken\r\n        }\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1]\r\n            const expiresIn = Number(expiresInMatch[1])\r\n            //This clears the parameters, allowing us to grab token when it expires.\r\n            window.setTimeout(()=> accessToken='',expiresIn*1000)\r\n            window.history.pushState('Access Token',null,'/')\r\n            return accessToken\r\n        }else {\r\n\r\n            const  accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirecURI}`\r\n            window.location = accessUrl\r\n        }\r\n    },\r\n    search(term){\r\n        const accessToken = this.getAccessToken()\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                    headers : {\r\n                        Authorization : `Bearer ${accessToken}`\r\n                    }\r\n                }\r\n            )\r\n            .then(response=>response.json())\r\n            .then(jsonData =>{\r\n                if (!jsonData.tracks){\r\n                    return []\r\n                }\r\n                return  jsonData.tracks.items.map(\r\n                    track => ({\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n\r\n            })\r\n                )\r\n            })\r\n\r\n    },\r\n    savePlayList(name,trackURIs){\r\n        if(!name  || !trackURIs ){\r\n            return\r\n        }\r\n\r\n        const accessToken = this.getAccessToken()\r\n        const  headers ={\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        let userID;\r\n\r\n        return fetch(`https://api.spotify.com/v1/me`,{headers:headers})\r\n                .then(response=>response.json())\r\n                .then(jsonResponse =>{\r\n                    userID = jsonResponse.id\r\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n                    {\r\n                            headers:headers,\r\n                            method : 'POST',\r\n                            body   : JSON.stringify({name:name})\r\n                        }\r\n                        ).then(response => response.json())\r\n                         .then(jsonResponse =>{\r\n                             const playListID = jsonResponse.id\r\n                             return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playListID}/tracks`,{\r\n                                 headers:headers,\r\n                                 method:\"POST\",\r\n                                 body : JSON.stringify({uris:trackURIs})\r\n                             })\r\n                         })\r\n                })\r\n\r\n    }\r\n}\r\n\r\nexport  default Spotify"]},"metadata":{},"sourceType":"module"}